/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mco2_ang_balbastro;

import java.awt.event.KeyAdapter;
import java.util.ArrayList;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;

/**
 * Area parent class
 * 
 * @author ANG, JEREMIAH MAXWELL
 * @author BALBASTRO, LIANNE MAXENE
 * @version 2.0
 */
public class Area extends javax.swing.JFrame{
    protected ArrayList<Floor> CFloors; 
    protected int nFloorCount;
    
    protected Player CPlayer;
    protected int nAreaIndex;
    protected String strAreaName;
    

    /**
     * Sole constructor.
     * Requires Player upon creation.
     * Creates new form StormveilCastle
     * @param CPlayer
     */
    public Area(int nFloorCount, Player CPlayer, int nAreaIndex, String strAreaName) {
        this.nFloorCount = nFloorCount;
        this.CPlayer = CPlayer;
        this.nAreaIndex = nAreaIndex;
        this.strAreaName = strAreaName;
        
        //Initalize floors
        this.CFloors = new ArrayList<Floor>();
        
        for(int i = 0; i < nFloorCount; i++){
            this.CFloors.add(new Floor());
        }
        
        CPlayer.setCurrentFloor(0);
        
        initComponents();
        updatePlayerStats(); 
    }
    

    
    /**
     * Generates a list of Tiles that belong to this floor.
     */
    protected void generateFloor(int nFloorIndex, int nFastTiles, int nSpawnTiles, int nBossTiles, int nDoorTiles){
//         System.out.println("Floor " + nFloorIndex + "created!");
        for(int i = 0; i < nFastTiles; i++){
            this.CFloors.get(nFloorIndex).getTiles().add(new FastTile(true));
        }
        
        
        for(int i = 0; i < nSpawnTiles; i++){
            this.CFloors.get(nFloorIndex).getTiles().add(new SpawnTile(true));
        }
        
        for(int i = 0; i < nBossTiles; i++){
            this.CFloors.get(nFloorIndex).getTiles().add(new BossTile(true));
        }
        
        for(int i = 0; i < nDoorTiles; i++){
            this.CFloors.get(nFloorIndex).getTiles().add(new DoorTile(true));
        }

    }
    
    /**
     * Associates Tile objects with their respective JLabels
     * @param nFloorCount 
     */
    protected void associateLabels(int nFloorCount){
        for(int i = 0; i < nFloorCount; i++){
            for(int j = 0; j < this.CFloors.get(i).getTiles().size(); j++){
                this.CFloors.get(i).getTiles().get(j).setLabel(     this.CFloors.get(i).getTileLabels().get(j)      );
            } 
        }

    }
     
    
    /**
     * Listens for user key strokes to perform actions.
     * 
     */
    public void addKeyListenerToFrame(javax.swing.JFrame fmFloor) { 
        fmFloor.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                int lvl = CPlayer.getCurrentFloor();

                int prevX = CFloors.get(lvl).getPlayerSprite().getX();
                int prevY = CFloors.get(lvl).getPlayerSprite().getY();
                
                movePlayer(e, CFloors.get(lvl).getPlayerSprite() ); //from Area parent 

                if (e.getKeyCode() == KeyEvent.VK_E){
                    CPlayer.setInteractStatus(true);
                }
                
                checkCollisions(prevX, prevY, lvl);
                CPlayer.setInteractStatus(false);

            }
        });
    }
    
    /**
     * Gives key listeners to each floor's frame.
     */
    protected void initializeKeyListener(){
        for(int i = 0; i < this.CFloors.size(); i++){
            addKeyListenerToFrame(this.CFloors.get(i).getFloorFrames());
        }
    }
    
    /**
     * Updates the player stats display on the bottom left of the screen.
     */
    protected void updatePlayerStats() {
        String statsText = String.format("Area: %s    Health: %d   Level: %d   Runes: %d", 
                                         strAreaName,
                                         CPlayer.getHealth(), 
                                         CPlayer.getPlayerLevel(), 
                                         CPlayer.getRunes());
        this.labStats.setText(statsText);

    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labHint = new javax.swing.JLabel();
        labStats = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setForeground(new java.awt.Color(0, 0, 0));
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setResizable(false);
        setSize(new java.awt.Dimension(1920, 1080));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labHint.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        labHint.setForeground(new java.awt.Color(255, 255, 255));
        labHint.setText("Press 'E' to Interact with Tile");
        getContentPane().add(labHint, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 290, 40));

        labStats.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        labStats.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(labStats, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 420, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents


    /**
     * Moves the player sprite when pressing either W, A, S, or D.
     * @param e 
     * @param labPlayer
     */
    protected void movePlayer(KeyEvent e, javax.swing.JLabel labPlayer) {
        int keyCode = e.getKeyCode();
        
        switch (keyCode) {
            case KeyEvent.VK_W -> labPlayer.setLocation(labPlayer.getX(), labPlayer.getY() - 60);
            case KeyEvent.VK_A -> labPlayer.setLocation(labPlayer.getX() - 60, labPlayer.getY());
            case KeyEvent.VK_S -> labPlayer.setLocation(labPlayer.getX(), labPlayer.getY() + 60);
            case KeyEvent.VK_D -> labPlayer.setLocation(labPlayer.getX() + 60, labPlayer.getY());
            
        }

        repaint();
    }
    
     /**
     * Checks if the player sprite is touching any of the JPanels representing Tiles.
     * Also checks if player is going out of bounds
     */
    protected void checkCollisions(int prevX, int prevY, int lvl) {
        // Tile Label Collision detected

        for (Tile CTile : this.CFloors.get(lvl).getTiles()) {
            
            CTile.setIsTouched(CFloors.get( lvl ).getPlayerSprite().getBounds().intersects( CTile.getLabel().getBounds()) );
            
            //FAST TILE
            if (CTile instanceof FastTile && CTile.getIsTouched() && CPlayer.getInteractStatus()) {
                
                //Message pop-up
                fastTravel();
            }
            
            //SPAWN TILE
            if (CTile instanceof SpawnTile && CTile.getIsTouched() && CPlayer.getInteractStatus()) {
                triggerSpawn((SpawnTile)CTile); 
            }
            
            //BOSS TILE
            if (CTile instanceof BossTile && CTile.getIsTouched() && CPlayer.getInteractStatus()) {
                triggerBoss((BossTile)CTile); 
            }
            
            
            //DOOR TILE
            //NOTE: Door Tile checking is individual since different doors open different frames
            if(CPlayer.getInteractStatus())
            checkDoor();
            
            
          //end of loop  
        }

        //Out of bounds condition
        boolean inBounds = true;
        int count = 0;
        
        for(int i = 0; i < this.CFloors.get(lvl).getFloorBack().size(); i++){
            inBounds = this.CFloors.get(lvl).getPlayerSprite().getBounds().intersects(this.CFloors.get(lvl).getFloorBack().get(i).getBounds());
            
            if (!inBounds) {
                count++;
            }
        }
        
        //if not colliding with all of the labels
        if(count == this.CFloors.get(lvl).getFloorBack().size()){
            CFloors.get(lvl).getPlayerSprite().setLocation(prevX, prevY);
            displayError();
        }

    }
    
    /**
     * Closes the current Area if Player proceeds with returning to the Game Lobby.
     */
        public void fastTravel(){
        int lvl = CPlayer.getCurrentFloor();
        
        int result = JOptionPane.showConfirmDialog(
            Area.this,
            "Return to Game Lobby?",
            "Fast Travel Tile triggered",
            JOptionPane.WARNING_MESSAGE
        );
        //Return to GameLobby when stepping on Fast Travel Tile
        if (result == JOptionPane.OK_OPTION) {
            java.awt.EventQueue.invokeLater(() -> {
                new GameLobby(CPlayer).setVisible(true);
                Area.this.CFloors.get(lvl).getFloorFrames().dispose();

            });
        }
    }

    /**
     * Triggers the specific SpawnTile to spawn an enemy or treasure 
     * @param CSpawn 
     */
    public void triggerSpawn(SpawnTile CSpawn){
        if(CSpawn.getIsEnabled()){
            CSpawn.spawn(CPlayer, nAreaIndex, strAreaName);
            CSpawn.disable();

            if(CSpawn.getPickedEnemy())
                goBattle(CSpawn.getEnemy());
            else{
                CSpawn.giveRunes(CPlayer);

                updatePlayerStats();
                
                
                JOptionPane.showMessageDialog(Area.this, "You've found " + CSpawn.getRunes() + " Runes!" + 
                "\nRunes: " + CPlayer.getRunes(), "TREASURE FOUND!", JOptionPane.INFORMATION_MESSAGE);
            }

        }

        else {
            tileDisableMessage();
        }

    }
    
    /**
     * Displays a "Tile Disabled" message.
     */
    protected void tileDisableMessage(){
        JOptionPane.showMessageDialog(Area.this, "Tile is disabled!", 
            "You've been here before", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Triggers the BossTile to spawn a Boss.
     * @param CBossTile
     */
    public void triggerBoss(BossTile CBossTile){
        if (CBossTile.getIsEnabled()) {
            CBossTile.generateBoss(nAreaIndex, strAreaName);

            goBattle(CBossTile.getBoss());
            
        // Interaction with Fast Travel Tile   
        } else if (!CBossTile.getIsEnabled()){
            tileDisableMessage();          
        }
    }
    
    /**
     * Checks the Player's current floor before using the appropriate door, areas have individual implementations.
     */
    protected void checkDoor(){}
    
    /**
     * Uses the indicated Door Tile based on the parameters given
     * @param thisLvl
     * @param nextLvlOffset
     * @param DoorIndex
     * @param isReturning 
     */
    protected void useDoor(int thisLvl, int nextLvlOffset, int DoorIndex, boolean isReturning){
        int nextLvl = thisLvl + nextLvlOffset;
        
        if(this.CFloors.get(thisLvl).getTiles().get(DoorIndex).getIsTouched()){
            this.CFloors.get(thisLvl).getTiles().get(DoorIndex).setIsTouched(false);
            
            this.CFloors.get(nextLvl).getFloorFrames().setVisible(true);
            this.CFloors.get(nextLvl).getFloorFrames().setFocusable(true);
            this.CFloors.get(nextLvl).getFloorFrames().requestFocusInWindow();
            
            CPlayer.setCurrentFloor(nextLvl);
            
            if(isReturning){
                int[] Coords = CPlayer.getLastPosition();
                
                CFloors.get(nextLvl).getPlayerSprite().setLocation(Coords[0], Coords[1]);
            }
            
            else{
                CPlayer.setLastPosition(CFloors.get(thisLvl).getPlayerSprite().getX(), CFloors.get(nextLvl).getPlayerSprite().getY());
            }
            
            this.CFloors.get(thisLvl).getFloorFrames().setFocusable(false);
            Area.this.CFloors.get(thisLvl).getFloorFrames().dispose();
        }
    }

    /**
     * Sends the player and the newly generated enemy to the Battle screen.
     * @param CEnemy 
     */
    public void goBattle(Enemy CEnemy){
        JOptionPane.showMessageDialog(Area.this, "YOU'VE APPROACHED AN ENEMY",
                "Let's Battle!", JOptionPane.INFORMATION_MESSAGE);

        Battle CBattle = new Battle(CPlayer, CEnemy);
        CBattle.setVisible(true);
        Area.this.dispose();

    }
    
    /**
     * Displays an Out of Bounds message.
     */
    public void displayError(){
        JOptionPane.showMessageDialog(this, "Out of Bounds", "Error", JOptionPane.WARNING_MESSAGE);

    }
    
    /**
     * Adds the player stats label to a given JFrame. 
     * @param Floors 
     */
    protected void addScreenDetails(ArrayList<Floor> Floors){
        for(int i = 0; i < Floors.size(); i++){
            Floors.get(i).getFloorFrames().getContentPane().add(labStats, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 420, 40));
            Floors.get(i).getFloorFrames().getContentPane().add(labHint, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 290, 40));
        }
    }
    
    /**
     * Getter for the player stats label.
     * @return javax.swing.JLabel
     */
    public javax.swing.JLabel getStatsLabel(){
        return this.labStats;
    }
    
    /**
     * Sets the player stats label.
     * @param labStats 
     */
    public void setStatsLabel(javax.swing.JLabel labStats){
        this.labStats = labStats;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel labHint;
    private javax.swing.JLabel labStats;
    // End of variables declaration//GEN-END:variables
}
